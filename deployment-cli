#!/usr/bin/env python3
import argparse
import json
import os
import requests
import subprocess

class ParsedArgs:
    def __init__(self, action, resource, target, authorization_header, verbose, url, create_payload):
        self.action = action
        self.resource = resource
        self.target = target
        self.authorization_header = authorization_header
        self.verbose = verbose
        self.url = url
        self.create_payload = create_payload


class GitHubDeploymentManagerParser:
    def __init__(self):
        self.parser = argparse.ArgumentParser(
            usage="""
            %(prog)s get environment [options]
            %(prog)s get environment <env_id> [options]
            %(prog)s get deployment [options]
            %(prog)s get deployment <deploy_id> [options]
            %(prog)s delete environment <env_id> [options]
            %(prog)s delete deployment <deploy_id> [options]
            %(prog)s create deployment --payload <payload> [options]
            """)
        self._add_arguments()

    def _add_arguments(self):
        self.parser.add_argument('action', choices=['get', 'delete', 'create'], help='Action to perform')

        self.parser.add_argument('resource', choices=['environment', 'deployment'], help='Resource type')

        self.parser.add_argument('target', nargs='?', default=None, help='Environment name or Deployment ID')

        self.parser.add_argument('--authorization_header', default=os.getenv('GITHUB_AUTH_HEADER', 'default_value_from_env'), help='Authorization header value, default GITHUB_AUTH_HEADER env variable')

        self.parser.add_argument('--verbose', action='store_true', help='Enable verbose mode')

        self.parser.add_argument('--api_url', default=os.getenv('GITHUB_API_URL', 'https://api.github.com'), help='GitHub API URL, default from GITHUB_API_URL env')

        self.parser.add_argument('--repo-owner', help='Repository owner')

        self.parser.add_argument('--repo-name', help='Repository name')

        self.parser.add_argument('--payload', help='JSON data to create a new deployment')

    def get_repo(self, repo_owner, repo_name):
        if repo_owner and repo_name:
            return repo_owner, repo_name
        elif repo_owner or repo_name:
            raise ValueError("Both --repo-owner and --repo-name must be provided or neither.")

        try:
            remote_url = subprocess.check_output(["git", "config", "--get", "remote.origin.url"]).decode("utf-8").strip()
            if remote_url.endswith(".git"):
                parts = remote_url.split("/")
                owner = parts[-2]
                repo = parts[-1][:-4]
                return owner, repo
            else:
                raise ValueError("Remote URL does not appear to be from GitHub.")
        except Exception as e:
            raise ValueError(f"Error while getting default owner and repo: {e}")

    def parse_command_line(self):
        args = self.parser.parse_args()
        owner, repo_name = self.get_repo(args.repo_owner, args.repo_name)
        url = f"{args.api_url}/repos/{owner}/{repo_name}"
        return ParsedArgs(
            action=args.action,
            resource=args.resource,
            target=args.target,
            authorization_header=args.authorization_header,
            verbose=args.verbose,
            url=url,
            create_payload=args.payload
        )

class GitHubDeployment:
    def __init__(self, api_base_url, token=None):
        self.token = token
        self.api_base_url = api_base_url

    def handle_api_errors(self, response, action):
        if response.status_code == 401:
            print(f"Error: Unauthorized. Please check your access token.")
        elif response.status_code == 403:
            print(f"Error: Forbidden. The provided token may not have sufficient permissions for {action}.")
        else:
            print(f"Error: {action} failed with status code {response.status_code}.")
            print("Response:", response.text)

    def delete_environment(self, environment_name):
        environment_url = f"{self.api_base_url}/environments/{environment_name}"
        headers = {"Authorization": self.token}
        response = requests.delete(environment_url, headers=headers)
        if response.status_code == 204:
            print(f"Deleted environment {environment_name} and associated deployments successfully.")
        elif response.status_code == 404:
            print(f"Environment {environment_name} not found. Nothing to delete.")
        else:
            self.handle_api_errors(response, "Delete environment")
            print("Response:", response.text)

    def delete_deployment(self, deployment_id):
        deployment_url = f"{self.api_base_url}/deployments/{deployment_id}"
        headers = {"Authorization": self.token}
        response = requests.delete(deployment_url, headers=headers)
        if response.status_code == 204:
            print(f"Deleted deployment {deployment_id} successfully.")
        elif response.status_code == 404:
            print(f"Deployment {deployment_id} not found. Nothing to delete.")
        else:
            self.handle_api_errors(response, "Delete deployment")
            print("Response:", response.text)

    def list_deployments(self, environment_name=None):
        deployments_url = f"{self.api_base_url}/deployments"
        headers = {"Authorization": self.token}
        params = {"environment": environment_name} if environment_name else {}
        response = requests.get(deployments_url, headers=headers, params=params)
        if response.status_code == 200:
            deployments_json = response.json()
            if deployments_json:
                return deployments_json
            else:
                print(f"No deployments found for environment {environment_name}.")
                return []
        elif response.status_code == 404:
            print("No deployments found.")
            return []
        else:
            self.handle_api_errors(response, "List deployments")
            print("Response:", response.text)
            return None

    def print_deployments_list(self, deployments):
        print("{:<15} {:<25} {:<20} {:<20} {:<40}".format("Deployment ID", "Created At", "Creator Name", "Environment", "Description"))
        print("-" * 130)
        for deployment in deployments:
            deployment_id = deployment.get('id', 'N/A')
            created_at = deployment.get('created_at', 'N/A')
            creator_name = deployment.get('creator', {}).get('login', 'N/A')
            environment = deployment.get('environment', {})
            description = deployment.get('description', 'N/A')
            print("{:<15} {:<25} {:<20} {:<20} {:<40}".format(str(deployment_id), str(created_at), str(creator_name), str(environment), str(description)))

    def get_deployment_by_id(self, deployment_id):
        deployment_url = f"{self.api_base_url}/deployments/{deployment_id}"
        headers = {"Authorization": self.token}
        response = requests.get(deployment_url, headers=headers)
        if response.status_code == 200:
            deployment_info = response.json()
            return deployment_info
        elif response.status_code == 404:
            print(f"No deployment found for deployment ID {deployment_id}.")
            return None
        else:
            self.handle_api_errors(response, "Get deployment by ID")
            print("Response:", response.text)
            return None
  
    def list_all_environments(self):
        environments_url = f"{self.api_base_url}/environments"
        headers = {"Authorization": self.token}
        response = requests.get(environments_url, headers=headers)

        try:
            response.raise_for_status()
            environments_json = response.json()

            if isinstance(environments_json, list):
                self.print_environments(environments_json)
            elif isinstance(environments_json, dict) and "environments" in environments_json:
                self.print_environments(environments_json["environments"])
            else:
                print("Error: Unexpected response format.")
                print("Response:", response.text)
        except requests.exceptions.HTTPError as http_err:
            if response.status_code == 404:
                print("No environments found.")
            else:
                print(f"HTTP error occurred: {http_err}")
                print("Response:", response.text)
        except json.JSONDecodeError as json_err:
            print(f"JSON decoding error occurred: {json_err}")
            print("Response:", response.text)
        except Exception as err:
            print(f"An error occurred: {err}")

    def print_environments(self, environments):
        if not environments:
            print("No environments found.")
        else:
          print("{:<30} {:<20} {:<30}".format("Name", "ID", "Updated At"))
          print("-" * 80)
          for environment in environments:
              name = environment.get('name', 'N/A')
              environment_id = environment.get('id', 'N/A')
              updated_at = environment.get('updated_at', 'N/A')
              print("{:<30} {:<20} {:<30}".format(str(name), str(environment_id), str(updated_at)))

    def print_deployment(self, deployment_info):
        print("Deployment Information:")
        print(f"  - ID: {deployment_info.get('id', 'N/A')}")
        print(f"  - Ref: {deployment_info.get('ref', 'N/A')}")
        print(f"  - Task: {deployment_info.get('task', 'N/A')}")
        print(f"  - Created at: {deployment_info.get('created_at', 'N/A')}")
        print(f"  - Updated at: {deployment_info.get('updated_at', 'N/A')}")
        payload_info = deployment_info.get('payload')
        if payload_info:
            print("\nPayload:")
            print(json.dumps(payload_info, indent=2))
        else:
            print("\nNo payload associated with this deployment.")

    def create_deployment(self, deployment_payload_json):
        headers = {"Authorization": self.token}

        try:
            deployment_payload = json.loads(deployment_payload_json)
        except json.JSONDecodeError as e:
            print(f"Error decoding JSON: {e}")
            return

        deployment_url = f"{self.api_base_url}/deployments"
        response = requests.post(deployment_url, headers=headers, data=json.dumps(deployment_payload))
        if response.status_code == 201:
            deployment_info = response.json()
            deployment_id = deployment_info.get("id")
            print(f"Created a new deployment (ID: {deployment_id}) successfully.")
        else:
            self.handle_api_errors(response, "Create deployment")
            print("Response:", response.text)

if __name__ == "__main__":
    parser = GitHubDeploymentManagerParser()

    args = parser.parse_command_line()

    util = GitHubDeployment(api_base_url=args.url, token=args.authorization_header)
    print()
    if args.action == "get":
        if args.resource == "environment":
            if args.target:
                deployments_info = util.list_deployments(args.target)
                util.print_deployments_list(deployments_info)
            else:
                util.list_all_environments()
        elif args.resource == "deployment":
            if args.target:
                deployment_info = util.get_deployment_by_id(args.target)
                if deployment_info:
                    util.print_deployment(deployment_info)
            else:
                deployments_info = util.list_deployments()
                util.print_deployments_list(deployments_info)
    elif args.action == "delete":
        if args.resource == "environment":
            util.delete_environment(args.target)
        elif args.resource == "deployment":
            util.delete_deployment(args.target)
    elif args.action == "create":
        if args.resource == "deployment":
            if args.create_payload:
                util.create_deployment(args.create_payload)
            else:
                print("Error: --payload is required for 'create' action.")
        elif args.resource == "environment":
            print("Functionality Not implemented")
    else:
        print("Invalid action.")
    print()
