#!/usr/bin/env python3
import os
import requests
import argparse

# Global Constants
# Set default values from environment variables
DEFAULT_OWNER = os.environ.get("GITHUB_OWNER", "renjithpk")
DEFAULT_REPO = os.environ.get("GITHUB_REPO", "gh-deployment-manager")
DEFAULT_TOKEN = os.environ.get("GITHUB_ACCESS_TOKEN", Non
API_BASE_URL = "https://api.github.com/repos"

# Parse command-line arguments
parser = argparse.ArgumentParser(description="A CLI to view and delete GitHub Deployment Environmentd and versions")
parser.add_argument("--owner", default=DEFAULT_OWNER, help="GitHub repository owner")
parser.add_argument("--repo", default=DEFAULT_REPO, help="GitHub repository name")
parser.add_argument("--env", help="Environment name")
parser.add_argument("--token", default=DEFAULT_TOKEN, help="GitHub Personal Access Token")
parser.add_argument("--list", action="store_true", help="List deployments without deleting")
parser.add_argument("--delete", action="store_true", help="Delete environment and associated deployments")
args = parser.parse_args()

# GitHub Repository Information
owner = args.owner
repo = args.repo

# Get Personal Access Token
access_token = args.token

# Environment Information
environment_name = args.env

# GitHub API Base URL
api_url = f"{API_BASE_URL}/{owner}/{repo}"

# Headers for API requests
headers = {"Authorization": f"token {access_token}"}

# Function to delete an environment
def delete_environment():
    environment_url = f"{api_url}/environments/{environment_name}"
    response = requests.delete(environment_url, headers=headers)
    
    if response.status_code == 204:
        print(f"Deleted environment {environment_name} successfully.")
    elif response.status_code == 404:
        print(f"Environment {environment_name} not found. Nothing to delete.")
    else:
        print(f"Failed to delete environment {environment_name}. Status Code: {response.status_code}")
        print("Response:", response.text)

# Function to delete a deployment by ID
def delete_deployment(deployment_id):
    deployment_url = f"{api_url}/deployments/{deployment_id}"
    response = requests.delete(deployment_url, headers=headers)
    
    if response.status_code == 204:
        print(f"Deleted deployment {deployment_id} successfully.")
    elif response.status_code == 404:
        print(f"Deployment {deployment_id} not found. Nothing to delete.")
    else:
        print(f"Failed to delete deployment {deployment_id}. Status Code: {response.status_code}")
        print("Response:", response.text)

# Function to list deployments for the specified environment
def list_deployments():
    deployments_url = f"{api_url}/deployments"
    params = {"environment": environment_name} if environment_name else {}
    response = requests.get(deployments_url, headers=headers, params=params)
    
    if response.status_code == 200:
        deployments_json = response.json()
        deployment_ids = [deployment["id"] for deployment in deployments_json]
        print("Deployment IDs:", deployment_ids)
        return deployment_ids
    elif response.status_code == 404:
        print(f"No deployments found for environment {environment_name}.")
        return []
    else:
        print(f"Failed to retrieve deployments. Status Code: {response.status_code}")
        print("Response:", response.text)
        return None

# Function to list all environments
def list_all_environments():
    environments_url = f"{api_url}/environments"
    response = requests.get(environments_url, headers=headers)
    if response.status_code == 200:
        environments_json = response.json()
        environment_names = [env["name"] for env in environments_json]
        print("Available Environment Names:", environment_names)
    else:
        print(f"Failed to retrieve environment names. Status Code: {response.status_code}")
        print("Response:", response.text)

# List all environment names if neither --list nor --delete is passed
if not args.list and not args.delete:
    list_all_environments()

# List deployments without deleting
if args.list:
    list_deployments()

# Delete the specified environment and associated deployments
if args.delete:
    # List deployments before deleting
    deployment_ids = list_deployments()

    # Delete each deployment
    if deployment_ids is not None:
        for deployment_id in deployment_ids:
            delete_deployment(deployment_id)

    # Delete the environment
    delete_environment()
