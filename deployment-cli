#!/usr/bin/env python3
import os
import requests
import argparse
import json
import subprocess

class CliParameters:
    def __init__(self):
        self.parser = argparse.ArgumentParser(description="A CLI to view, create, and delete GitHub Deployment Environments and versions")
        self.default_owner, self.default_repo = self.get_default_owner_repo()
        self.default_token = os.environ.get("AUTHORIZATION_HEADER_VALUE", None)
        self.api_base_url = "https://api.github.com/repos"

        self.parser.add_argument("--owner", default=self.default_owner, help="GitHub repository owner")
        self.parser.add_argument("--repo", default=self.default_repo, help="GitHub repository name")
        self.parser.add_argument("--env", help="Environment name")
        self.parser.add_argument("--token", default=self.default_token, help="GitHub Personal Access Token")
        self.parser.add_argument("--list", action="store_true", help="List deployments without deleting")
        self.parser.add_argument("--delete", action="store_true", help="Delete environment and associated deployments")
        self.parser.add_argument("--create", action="store_true", help="Create a new deployment.")
        self.parser.add_argument("--payload", dest="deployment_payload_json", help="JSON payload for creating a deployment.")

    def get_default_owner_repo(self):
        try:
            remote_url = subprocess.check_output(["git", "config", "--get", "remote.origin.url"]).decode("utf-8").strip()
            if "github.com" in remote_url:
                parts = remote_url.split("/")
                owner = parts[-2]
                repo = parts[-1].rstrip(".git")
                return owner, repo
            else:
                raise ValueError("Remote URL does not appear to be from GitHub.")
        except Exception as e:
            raise ValueError(f"Error while getting default owner and repo: {e}")

    def get(self):
        args = self.parser.parse_args()

        DynamicArgs = type("DynamicArgs", (), {
            "env": args.env,
            "token": args.token,
            "list": args.list,
            "delete": args.delete,
            "create": args.create,
            "deployment_payload_json": args.deployment_payload_json,
            "api_url":  f"{self.api_base_url}/{args.owner}/{args.repo}"
        })
        return DynamicArgs()

class GitHubDeploymentCLI:
    def execute(self):
        cli_parameters = CliParameters()

        args = cli_parameters.get()
        environment_name = args.env
        api_url = args.api_url
        headers = {"Authorization": args.token}

        if not any([args.list, args.delete, args.create]):
            self.list_all_environments(api_url, headers)

        if args.list:
            self.list_deployments(api_url, headers, environment_name)

        if args.delete:
            deployment_ids = self.list_deployments(api_url, headers, environment_name)
            if deployment_ids is not None:
                self.delete_deployments_and_environment(api_url, headers, deployment_ids, environment_name)

        if args.create:
            self.create_deployment(api_url, headers, args.deployment_payload_json)

    def handle_api_errors(self, response, action):
        if response.status_code == 401:
            print(f"Error: Unauthorized. Please check your access token.")
        elif response.status_code == 403:
            print(f"Error: Forbidden. The provided token may not have sufficient permissions for {action}.")
        else:
            print(f"Error: {action} failed with status code {response.status_code}.")
            print("Response:", response.text)

    def delete_environment(self, api_url, headers, environment_name):
        environment_url = f"{api_url}/environments/{environment_name}"
        response = requests.delete(environment_url, headers=headers)
        if response.status_code == 204:
            print(f"Deleted environment {environment_name} successfully.")
        elif response.status_code == 404:
            print(f"Environment {environment_name} not found. Nothing to delete.")
        else:
            self.handle_api_errors(response, "Delete environment")
            print("Response:", response.text)

    def delete_deployment(self, api_url, headers, deployment_id):
        deployment_url = f"{api_url}/deployments/{deployment_id}"
        response = requests.delete(deployment_url, headers=headers)
        if response.status_code == 204:
            print(f"Deleted deployment {deployment_id} successfully.")
        elif response.status_code == 404:
            print(f"Deployment {deployment_id} not found. Nothing to delete.")
        else:
            self.handle_api_errors(response, "Delete deployment")
            print("Response:", response.text)

    def list_deployments(self, api_url, headers, environment_name):
        deployments_url = f"{api_url}/deployments"
        params = {"environment": environment_name} if environment_name else {}
        response = requests.get(deployments_url, headers=headers, params=params)
        if response.status_code == 200:
            deployments_json = response.json()
            deployment_ids = [deployment["id"] for deployment in deployments_json]
            print("Deployment IDs:", deployment_ids)
            return deployment_ids
        elif response.status_code == 404:
            print(f"No deployments found for environment {environment_name}.")
            return []
        else:
            self.handle_api_errors(response, "List deployments")
            print("Response:", response.text)
            return None

    def list_all_environments(self, api_url, headers):
        environments_url = f"{api_url}/environments"
        response = requests.get(environments_url, headers=headers)

        try:
            response.raise_for_status()
            environments_json = response.json()

            if isinstance(environments_json, list):
                self.print_environments(environments_json)
            elif isinstance(environments_json, dict) and "environments" in environments_json:
                self.print_environments(environments_json["environments"])
            else:
                print("Error: Unexpected response format.")
                print("Response:", response.text)
        except requests.exceptions.HTTPError as http_err:
            if response.status_code == 404:
                print("No environments found.")
            else:
                print(f"HTTP error occurred: {http_err}")
                print("Response:", response.text)
        except json.JSONDecodeError as json_err:
            print(f"JSON decoding error occurred: {json_err}")
            print("Response:", response.text)
        except Exception as err:
            print(f"An error occurred: {err}")

    def print_environments(self, environments):
        if not environments:
            print("No environments found.")
        else:
            environment_names = [env["name"] for env in environments]
            print("Available Environment Names:", environment_names)

    def create_deployment(self, api_url, headers, deployment_payload_json):
        try:
            deployment_payload = json.loads(deployment_payload_json)
        except json.JSONDecodeError as e:
            print(f"Error decoding JSON: {e}")
            return

        deployment_url = f"{api_url}/deployments"
        response = requests.post(deployment_url, headers=headers, data=json.dumps(deployment_payload))
        if response.status_code == 201:
            deployment_info = response.json()
            deployment_id = deployment_info.get("id")
            print(f"Created a new deployment (ID: {deployment_id}) successfully.")
        else:
            self.handle_api_errors(response, "Create deployment")
            print("Response:", response.text)

    def delete_deployments_and_environment(self, api_url, headers, deployment_ids, environment_name):
        for deployment_id in deployment_ids:
            self.delete_deployment(api_url, headers, deployment_id)
        self.delete_environment(api_url, headers, environment_name)

if __name__ == "__main__":
    GitHubDeploymentCLI().execute()
